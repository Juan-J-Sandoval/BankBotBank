AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  BankBot


Parameters:
  Vers:
    Default: banco
    Type: String
    Description: Variable que indica el entorno en el que se va a desplegar la plantilla
  Env:
    Default: Env
    Type: String
    Description: Variable que indica el entorno en el que se va a desplegar la plantilla
  SecretManage:
    Description: Arn del secret manage
    Type: String
    Default: arn
  ClusterArn:
    Description: Arn de la base de datos
    Type: String
    Default: arn
  DBTableName:
    Description: Nombre de la tabla creada
    Type: String
    Default: BankBot
  BotName:
    Default: TestGV
    Type: String
    Description: Nombre del bot que esta en Lex y se encuentra en LexData.json
  BotAlias:
    Default: TestGV
    Type: String
    Description: Alias del bot que esta en Lex y se encuentra en la consola de lex
  # Email:
  #   Default: zafir@digitalconnect.com.mx
  #   Type: String
  #   Description: Correo que envia los email
  # PassEmail:
    Default: desarrolloDC
    Type: String
    Description: Password del correo

Resources:
  #Rol general
  RoleLogs:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub RolGeneral-${Vers}-${Env}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - cloudwatch.amazonaws.com
                - logs.amazonaws.com
                - states.amazonaws.com
                - dynamodb.amazonaws.com
                - lex.amazonaws.com
                - s3.amazonaws.com
                - comprehend.amazonaws.com
                - apigateway.amazonaws.com
                - rds.amazonaws.com
                - ecs.amazonaws.com
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies: 
        - PolicyName: !Sub PolicyGeneral-${Vers}-${Env}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: permisosecr
                Effect: Allow
                Action:
                  - cloudwatch:*
                  - lambda:*
                  - logs:*
                  - states:*
                  - dynamodb:*
                  - lex:*
                  - s3:*
                  - comprehend:*
                  - execute-api:*
                  - apigateway:*
                  - ecr:*
                  - rds-data:*
                  - secretsmanager:*
                Resource: "*"
  #S3 de almacenamiento general
  S3General:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub files-${Vers}-${Env}
  #Socket User
  SocketUser:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub socket_user-${Vers}-${Env}
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  RutaConexionUser:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SocketUser
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: Ruta de conexion
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref IntegracionConexionUser
  IntegracionConexionUser:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SocketUser
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: 
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketConnectUser.Arn}/invocations
  RutaDesconexionUser:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SocketUser
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: Ruta de desconexion
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref IntegracionDesconexionUser
  IntegracionDesconexionUser:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SocketUser
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: 
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketDisconnectUser.Arn}/invocations
  RutaMensajeUser:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SocketUser
      RouteKey: mensaje
      AuthorizationType: NONE
      OperationName: RutaMensajeUser
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref IntegracionSocketMensajeUser
  IntegracionSocketMensajeUser:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SocketUser
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketMensajeUser.Arn}/invocations            
  DeploymentUser:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - RutaConexionUser
    - RutaMensajeUser
    - RutaDesconexionUser
    Properties:
      ApiId: !Ref SocketUser
  StageUser:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref Env
      DeploymentId: !Ref DeploymentUser
      ApiId: !Ref SocketUser
  SocketConnectUser:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SocketConnectUser-${Vers}-${Env}
      CodeUri: SocketConnectUser
      Role: !GetAtt RoleLogs.Arn
  PermisosSocketConnectUser:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SocketUser
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SocketConnectUser
      Principal: apigateway.amazonaws.com
  SocketDisconnectUser:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SocketDisconnectUser-${Vers}-${Env}
      CodeUri: SocketDisconnectUser
      Role: !GetAtt RoleLogs.Arn
      Environment:
        Variables:
          cluster_arn_aurora: !Ref ClusterArn
          secret_arn_aurora: !Ref SecretManage
          name_db: !Ref DBTableName
  PermisosSocketDisconnectUser:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SocketUser
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SocketDisconnectUser
      Principal: apigateway.amazonaws.com
  SocketMensajeUser:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SocketMensajeUser-${Vers}-${Env}
      CodeUri: SocketMensajeUser
      Role: !GetAtt RoleLogs.Arn
      Environment:
        Variables:
          STATE_MACHINE: !Ref ConversationFlow
          cluster_arn_aurora: !Ref ClusterArn
          secret_arn_aurora: !Ref SecretManage
          name_db: !Ref DBTableName
          socketAgente: !Join [ '', [ 'https://', !Ref SocketAgent, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref Env]]
  PermisosSocketMensajeUser:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SocketUser
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SocketMensajeUser
      Principal: apigateway.amazonaws.com
  #Socket Agent
  SocketAgent:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: 'BankBot'
      Name: !Sub socket_agente-${Vers}-${Env}
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  RutaConexionAgent:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SocketAgent
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: Ruta de conexion
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref IntegracionConexionAgent
  IntegracionConexionAgent:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SocketAgent
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: 
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketConnectAgent.Arn}/invocations
  RutaDesconexionAgent:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SocketAgent
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: Ruta de desconexion
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref IntegracionDesconexionAgent
  IntegracionDesconexionAgent:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SocketAgent
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: 
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketDisconnectAgent.Arn}/invocations
  RutaMensajeAgent:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SocketAgent
      RouteKey: mensaje
      AuthorizationType: NONE
      OperationName: RutaMensajeAgent
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref IntegracionSocketMensajeAgent
  IntegracionSocketMensajeAgent:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SocketAgent
      Description: Integracion Mensaje
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketMensajeAgent.Arn}/invocations            
  DeploymentAgent:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - RutaConexionAgent
    - RutaMensajeAgent
    - RutaDesconexionAgent
    Properties:
      ApiId: !Ref SocketAgent
  StageAgent:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref Env
      DeploymentId: !Ref DeploymentAgent
      ApiId: !Ref SocketAgent
  SocketConnectAgent:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SocketConnectAgent-${Vers}-${Env}
      CodeUri: SocketConnectAgent
      Role: !GetAtt RoleLogs.Arn
      Environment:
        Variables:
          cluster_arn_aurora: !Ref ClusterArn
          secret_arn_aurora: !Ref SecretManage
          name_db: !Ref DBTableName
  PermisosSocketConnectAgent:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SocketAgent
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SocketConnectAgent
      Principal: apigateway.amazonaws.com
  SocketDisconnectAgent:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SocketDisconnectAgent-${Vers}-${Env}
      CodeUri: SocketDisconnectAgent
      Role: !GetAtt RoleLogs.Arn
      Environment:
        Variables:
          cluster_arn_aurora: !Ref ClusterArn
          secret_arn_aurora: !Ref SecretManage
          name_db: !Ref DBTableName
  PermisosSocketDisconnectAgent:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SocketAgent
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SocketDisconnectAgent
      Principal: apigateway.amazonaws.com
  SocketMensajeAgent:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SocketMensajeAgent-${Vers}-${Env}
      CodeUri: SocketMensajeAgent
      Role: !GetAtt RoleLogs.Arn
      Environment:
        Variables:
          cluster_arn_aurora: !Ref ClusterArn
          secret_arn_aurora: !Ref SecretManage
          name_db: !Ref DBTableName
          socketUsuario: !Join [ '', [ 'https://', !Ref SocketUser, '.execute-api.', !Ref AWS::Region, '.amazonaws.com/', !Ref Env]]
  PermisosSocketMensajeAgent:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SocketAgent
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SocketMensajeAgent
      Principal: apigateway.amazonaws.com
  #Maquina de estados
  ConversationFlow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ConversationFlow-${Vers}-${Env}
      DefinitionUri: StateMachine/StateMachineBankBot.asl.json
      DefinitionSubstitutions:
        SFPasoUnoArn: !GetAtt SFPasoUno.Arn
        SFMensajeXArn: !GetAtt SFMensajeX.Arn
        SFSegurosArn: !GetAtt SFSeguros.Arn
        SFAclaracionesArn: !GetAtt SFAclaraciones.Arn
        SFCuentasArn: !GetAtt SFCuentas.Arn
        SFCreditosArn: !GetAtt SFCreditos.Arn
        SFPasoTresArn: !GetAtt SFPasoTres.Arn
      Role: !GetAtt RoleLogs.Arn
      Type: EXPRESS
  SFPasoUno:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SFPasoUno-${Vers}-${Env}
      CodeUri: SFPasoUno
      Role: !GetAtt RoleLogs.Arn
      Environment:
        Variables:
          ConversationService: !Ref ConversationService
  SFMensajeX:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SFMensajeX-${Vers}-${Env}
      CodeUri: SFMensajeX
      Role: !GetAtt RoleLogs.Arn
      Environment:
        Variables:
          GoogleSearch: !Ref GoogleSearchLambda
          SemanticDistance: !Ref SemanticDistance
          Snips: !Ref Snips
          BOT_NAME: !Ref BotName
          BOT_ALIAS: !Ref BotAlias
          BUCKET_NAME: !Ref S3General
          BOT_DATA_FILE: responseDatas.json
  SFSeguros:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SFSeguros-${Vers}-${Env}
      CodeUri: SFSeguros
      Role: !GetAtt RoleLogs.Arn
  SFAclaraciones:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SFAclaraciones-${Vers}-${Env}
      CodeUri: SFAclaraciones
      Role: !GetAtt RoleLogs.Arn
  SFCuentas:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SFCuentas-${Vers}-${Env}
      CodeUri: SFCuentas
      Role: !GetAtt RoleLogs.Arn
  SFCreditos:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SFCreditos-${Vers}-${Env}
      CodeUri: SFCreditos
      Role: !GetAtt RoleLogs.Arn
  SFPasoTres:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SFPasoTres-${Vers}-${Env}
      CodeUri: SFPasoTres
      Role: !GetAtt RoleLogs.Arn
      Environment:
        Variables:
          ConversationService: !Ref ConversationService
  #Motores de PLN
  GoogleSearchLambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub GoogleSearch-${Vers}-${Env}
      CodeUri: GoogleSearch
      Layers: 
        - !Ref LayerGoogle
      Role: !GetAtt RoleLogs.Arn
  LayerGoogle:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub LayerGoogle-${Vers}-${Env}
      ContentUri: Layers/google
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.8
  SemanticDistance:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub SemanticDistance-${Vers}-${Env}
      CodeUri: SemanticDistance
      Layers:
        - !Ref LayerDistance
      Role: !GetAtt RoleLogs.Arn
  LayerDistance:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub LayerDistance-${Vers}-${Env}
      ContentUri: Layers/distancia
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.8
  Snips:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 30
      MemorySize: 512
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub Snips-${Vers}-${Env}
      CodeUri: Snips
      Environment:
        Variables:
          MODEL_BUCKET_NAME: !Ref S3General 
          ENTIDADESPLN: !Ref EntidadesPLN
      Layers: 
        - !Ref LayerSnips 
      Role: !GetAtt RoleLogs.Arn
  EntidadesPLN:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 512
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub EntidadesPLN-${Vers}-${Env}
      CodeUri: EntidadesPLN
      Role: !GetAtt RoleLogs.Arn
  LayerSnips:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub LayerSnips-${Vers}-${Env}
      ContentUri: Layers/snips
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.8
  #Lex
  # Lex:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Runtime: python3.8
  #     Timeout: 29
  #     MemorySize: 128
  #     Handler: lambda_function.lambda_handler
  #     FunctionName: !Sub Lex-${Vers}-${Env}
  #     CodeUri: Lex
  #     Role: !GetAtt RoleLogs.Arn
  # PermisosLex:
    # Type: AWS::Lambda::Permission
    # DependsOn:
    #   - PointAccess
    # Properties:
    #   Action: lambda:InvokeFunction
    #   FunctionName: !Ref Lex
    #   Principal: apigateway.amazonaws.com
  #Conexiones a Aurora Serverless
  # ConversationTests:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Runtime: python3.8
  #     Timeout: 29
  #     MemorySize: 128
  #     Handler: lambda_function.lambda_handler
  #     FunctionName: !Sub ConversationTests-${Env}
  #     CodeUri: ConversationTests
  #     Description: BankBot
  #     Role: !GetAtt RoleLogs.Arn
  #     Environment:
  #       Variables:
  #         cluster_arn_aurora: !Ref ClusterArn
  #         secret_arn_aurora: !Ref SecretManage
  #         name_db: !Ref DBTableName
  # PermisosConversationTests:
  #   Type: AWS::Lambda::Permission
  #   DependsOn:
  #     - PointAccess
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref ConversationTests
  #     Principal: apigateway.amazonaws.com
  # MetricsService:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Runtime: python3.8
  #     Timeout: 29
  #     MemorySize: 128
  #     Handler: lambda_function.lambda_handler
  #     FunctionName: !Sub MetricsService-${Env}
  #     CodeUri: MetricsService
  #     Description: BankBot
  #     Role: !GetAtt RoleLogs.Arn
  #     Environment:
  #       Variables:
  #         cluster_arn_aurora: !Ref ClusterArn
  #         secret_arn_aurora: !Ref SecretManage
  #         name_db: !Ref DBTableName
  # PermisosMetricsService:
  #   Type: AWS::Lambda::Permission
  #   DependsOn:
  #     - PointAccess
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref MetricsService
  #     Principal: apigateway.amazonaws.com
  # ClientService:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Runtime: python3.8
  #     Timeout: 29
  #     MemorySize: 128
  #     Handler: lambda_function.lambda_handler
  #     FunctionName: !Sub ClientService-${Env}
  #     CodeUri: ClientService
  #     Description: BankBot
  #     Role: !GetAtt RoleLogs.Arn
  #     Environment:
  #       Variables:
  #         cluster_arn_aurora: !Ref ClusterArn
  #         secret_arn_aurora: !Ref SecretManage
  #         name_db: !Ref DBTableName
  # PermisosClientService:
  #   Type: AWS::Lambda::Permission
  #   DependsOn:
  #     - PointAccess
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref ClientService
  #     Principal: apigateway.amazonaws.com
  ConversationService:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub ConversationService-${Vers}-${Env}
      CodeUri: ConversationService
      Role: !GetAtt RoleLogs.Arn
      Environment:
        Variables:
          cluster_arn_aurora: !Ref ClusterArn
          secret_arn_aurora: !Ref SecretManage
          name_db: !Ref DBTableName
  # PermisosConversationService:
  #   Type: AWS::Lambda::Permission
  #   DependsOn:
  #     - PointAccess
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref ConversationService
  #     Principal: apigateway.amazonaws.com
  UserService:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Timeout: 29
      MemorySize: 128
      Handler: lambda_function.lambda_handler
      FunctionName: !Sub UserService-${Vers}-${Env}
      CodeUri: UserService
      Role: !GetAtt RoleLogs.Arn
      Environment:
        Variables:
          cluster_arn_aurora: !Ref ClusterArn
          secret_arn_aurora: !Ref SecretManage
          name_db: !Ref DBTableName
  # PermisosUserService:
  #   Type: AWS::Lambda::Permission
  #   DependsOn:
  #     - PointAccess
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref UserService
  #     Principal: apigateway.amazonaws.com
  # ReportsService:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Runtime: python3.8
  #     Timeout: 29
  #     MemorySize: 128
  #     Handler: lambda_function.lambda_handler
  #     FunctionName: !Sub ReportsService-${Env}
  #     CodeUri: ReportsService
  #     Description: BankBot
  #     Role: !GetAtt RoleLogs.Arn
  #     Environment:
  #       Variables:
  #         cluster_arn_aurora: !Ref ClusterArn
  #         secret_arn_aurora: !Ref SecretManage
  #         name_db: !Ref DBTableName
  # PermisosReportsService:
  #   Type: AWS::Lambda::Permission
  #   DependsOn:
  #     - PointAccess
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref ReportsService
  #     Principal: apigateway.amazonaws.com
  # #Todas las apis generales
  # PointAccess:
  #   Type: AWS::ApiGateway::RestApi
  #   Properties:
  #     Body:
  #       openapi: "3.0.1"
  #       info:
  #         title: !Sub PointAccess-${Env}
  #         description: "Open API"
  #       paths:
  #         /import:
  #           post:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               uri: !Sub 
  #                 - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Lambda}/invocations
  #                 - {Lambda: !Ref Lex}
  #               httpMethod: "POST"
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "aws"
  #           options:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "mock"
  #         /{folder}:
  #           put:
  #             parameters:
  #             - name: "Content-Type"
  #               in: "header"
  #               schema:
  #                 type: "string"
  #             - name: "folder"
  #               in: "path"
  #               required: true
  #               schema:
  #                 type: "string"
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Content-Length:
  #                     schema:
  #                       type: "string"
  #                   Timestamp:
  #                     schema:
  #                       type: "string"
  #                   Content-Type:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             security:
  #             - sigv4: []
  #             x-amazon-apigateway-integration:
  #               type: "aws"
  #               httpMethod: "PUT"
  #               credentials: !GetAtt RoleLogs.Arn
  #               uri: "arn:aws:apigateway:us-west-2:s3:path/bucket"
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Content-Type: "integration.response.header.Content-Type"
  #                     method.response.header.Content-Length: "integration.response.header.Content-Length"
  #                     method.response.header.Timestamp: "integration.response.header.Date"
  #               requestParameters:
  #                 integration.request.header.x-amz-acl: "'authenticated-read'"
  #                 integration.request.path.bucket: "method.request.path.folder"
  #                 integration.request.header.Content-Type: "method.request.header.Content-Type"
  #               passthroughBehavior: "when_no_match"
  #         /{folder}/{item}:
  #           put:
  #             parameters:
  #             - name: "item"
  #               in: "path"
  #               required: true
  #               schema:
  #                 type: "string"
  #             - name: "folder"
  #               in: "path"
  #               required: true
  #               schema:
  #                 type: "string"
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               type: "aws"
  #               httpMethod: "PUT"
  #               credentials: !GetAtt RoleLogs.Arn
  #               uri: "arn:aws:apigateway:us-west-2:s3:path/{bucket}/{object}"
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #               requestParameters:
  #                 integration.request.path.object: "method.request.path.item"
  #                 integration.request.path.bucket: "method.request.path.folder"
  #               passthroughBehavior: "when_no_match"
  #         /convertest:
  #           post:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               uri: !Sub 
  #                 - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Lambda}/invocations
  #                 - {Lambda: !Ref ConversationTests}
  #               httpMethod: "POST"
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "aws"
  #           options:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "mock"
  #         /user:
  #           post:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${UserService}/invocations
  #               httpMethod: "POST"
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "aws"
  #           options:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "mock"
  #         /metrics:
  #           get:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${MetricsService}/invocations
  #               httpMethod: "POST"
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               contentHandling: "CONVERT_TO_TEXT"
  #               type: "aws"
  #           post:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${MetricsService}/invocations
  #               httpMethod: "POST"
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "aws"
  #           options:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "mock"      
  #         /clients:
  #           post:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               uri: !Sub 
  #                 - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Lambda}/invocations
  #                 - {Lambda: !Ref ClientService}
  #               httpMethod: "POST"
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "aws"
  #           options:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "mock"
  #         /conversation:
  #           post:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               uri: !Sub 
  #                 - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Lambda}/invocations
  #                 - {Lambda: !Ref ConversationService}
  #               httpMethod: "POST"
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "aws"
  #           options:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "mock"
  #         /reports:
  #           post:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ReportsService}/invocations
  #               httpMethod: "POST"
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "aws"
  #           options:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "mock"
  #         /token:
  #           get:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               httpMethod: "POST"
  #               uri: !Sub 
  #                 - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Lambda}/invocations
  #                 - {Lambda: !Ref TwilioToken}
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "aws"
  #           options:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "mock"
  #         /start:
  #           get:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   text/xml:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               httpMethod: "POST"
  #               uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${TwilioStart}/invocations
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "aws_proxy"
  #           options:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   text/xml:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "mock"
  #         /engine:
  #           get:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   text/xml:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               httpMethod: "POST"
  #               uri: !Sub 
  #                 - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Lambda}/invocations
  #                 - {Lambda: !Ref TwilioEngine}
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "aws_proxy"
  #           options:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   text/xml:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "mock"
  #         /SnipsTrainer:
  #           post:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SnipsTrainer}/invocations
  #               httpMethod: "POST"
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "aws"
  #           options:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "mock"
  #         /SemanticDistanceTrainer:
  #           post:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SemanticDistanceTrainer}/invocations
  #               httpMethod: "POST"
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "aws"
  #           options:
  #             responses:
  #               "200":
  #                 description: "200 response"
  #                 headers:
  #                   Access-Control-Allow-Origin:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Methods:
  #                     schema:
  #                       type: "string"
  #                   Access-Control-Allow-Headers:
  #                     schema:
  #                       type: "string"
  #                 content:
  #                   application/json:
  #                     schema:
  #                       $ref: "#/components/schemas/Empty"
  #             x-amazon-apigateway-integration:
  #               responses:
  #                 default:
  #                   statusCode: "200"
  #                   responseParameters:
  #                     method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #                     method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #                     method.response.header.Access-Control-Allow-Origin: "'*'"
  #               passthroughBehavior: "when_no_match"
  #               type: "mock"
  #       components:
  #         schemas:
  #           Empty:
  #             title: "Empty Schema"
  #             type: "object"
  #       x-amazon-apigateway-binary-media-types:
  #       - "*/*"
  #     Mode: overwrite
  # ImplementacionAPIS:
    # Type: AWS::ApiGateway::Deployment
    # Properties:
    #   RestApiId: !Ref PointAccess
    #   Description: OPEN API
    #   StageName: !Ref Env
Outputs:
  WebSocketUser:
    Description: "Socket Usuario"
    Value: !Join [ '', [ 'wss://', !Ref SocketUser, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref StageUser]]
  WebSocketAgent:
    Description: "Socket Agente"
    Value: !Join [ '', [ 'wss://', !Ref SocketAgent, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref StageAgent]]
  # ApiGeneral:
  #   Description: "API para FRONT-END"
  #   Value: !Join [ '', [ 'https://', !Ref PointAccess, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref Env]]
  RolFullAccess:
    Description: "Rol para todas las herramientas"
    Value: !GetAtt RoleLogs.Arn
